import 'dart:math';

// 앱의 컨샙:
// 1. 1부터 45까지의 숫자 중 6개를 선택하여 로또 번호를 생성합니다.

void main() {
  const int totalNumbers = 45;
  const int drawCount = 6;
  List<int> selectedNumbers;

  List<List<int>> historicalDraws = [];
  const n = 100;

  // 100번의 시도에 대해 로또 번호를 선택합니다.
  // selectUniqueNumbersOrdered는 실제는 진짜 로또 번호를 뽑았던 기록을 사용해야 하지만, 여기서는 랜덤으로 생성합니다.
  for (int i = 0; i < n; i++) {
    selectedNumbers = selectUniqueNumbersOrdered(totalNumbers, drawCount);
    // print('Selected numbers in order: $selectedNumbers');
    historicalDraws.add(selectedNumbers);
  }

  // 좋아하는 특별한 추첨 결과들을 추가합니다.
  List<List<int>> customFavoriteDraws = [
    [1, 2, 3, 4, 5, 6],
    [2, 3, 4, 5, 6, 7],
    // Add more data as needed
  ];
  historicalDraws.addAll(customFavoriteDraws);

  // 빈도와 확률을 계산합니다.
  var frequencies = calculateFrequencies(historicalDraws, 45);
  print('Frequencies: $frequencies\n');

  // 빈도를 기반으로 확률을 계산합니다.
  var historicalProbabilities = calculateProbabilitiesByHistory(frequencies);

  print('Historical probabilities: $historicalProbabilities\n');

  // 노이즈 기반 확률을 생성합니다. (예제와 일치하도록 5개의 요소를 가정합니다.)
  List<double> noiseProbabilities = calculateProbabilitiesByNoise(5);

  print('Noise probabilities: $noiseProbabilities\n');

  // 노이즈 기반 확률과 히스토리 기반 확률을 통합합니다.
  Map<int, List<double>> integratedProbabilities =
      integrateProbabilities(historicalProbabilities, noiseProbabilities);

  print('Integrated probabilities: $integratedProbabilities\n');

  // 계산된 확률을 기반으로 무작위 시뮬레이션을 수행합니다. (유일한 숫자로)
  List<int> trialDraw = simulateRandomTrialUnique(integratedProbabilities);
  print('Randomly simulated draw with unique numbers: $trialDraw');
}

Map<int, List<int>> calculateFrequencies(
    List<List<int>> draws, int numChoices) {
  Map<int, List<int>> frequencyMap = {};
  // Initialize with a base frequency of 1 for smoothing
  for (int i = 0; i < 6; i++) {
    frequencyMap[i] =
        List.filled(numChoices, 1); // Start counts at 1 instead of 0
  }

  for (var draw in draws) {
    for (int position = 0; position < draw.length; position++) {
      int number = draw[position];
      // Safely increment the frequency count
      frequencyMap[position]![number - 1]++;
    }
  }

  return frequencyMap;
}

Map<int, List<double>> calculateProbabilitiesByHistory(
    Map<int, List<int>> frequencies) {
  Map<int, List<double>> probabilityMap = {};

  frequencies.forEach((position, freqs) {
    int totalDraws = freqs.reduce((a, b) => a + b);
    List<double> probs =
        freqs.map((freq) => freq / totalDraws.toDouble()).toList();
    probabilityMap[position] = probs;
  });

  return probabilityMap;
}

// 노이즈 기반 확률을 생성합니다.
// 원래는 기기의 물리적 속성을 사용하여 노이즈를 생성해야 하지만, 여기서는 랜덤으로 생성합니다.
List<double> calculateProbabilitiesByNoise(int numElements) {
  final Random random = Random();
  // Ensure this matches the number of elements in the lottery system
  List<double> noiseData =
      List.generate(numElements, (_) => random.nextDouble());

  // Normalize the noise data to sum to 1, turning them into probabilities
  double sum = noiseData.reduce((value, element) => value + element);
  List<double> probabilities = noiseData.map((value) => value / sum).toList();

  return probabilities;
}

Map<int, List<double>> integrateProbabilities(
    Map<int, List<double>> historicalProbabilities,
    List<double> noiseProbabilities) {
  Map<int, List<double>> integratedProbabilities = {};

  historicalProbabilities.forEach((position, probs) {
    List<double> integratedProbs = List.generate(probs.length, (index) {
      // Safely handle different sizes between historical and noise probabilities
      double noiseProb =
          index < noiseProbabilities.length ? noiseProbabilities[index] : 0.0;
      // Integrate using available noise probability or default to historical if noise is unavailable
      return (probs[index] + noiseProb) / 2;
    });

    // Normalize the integrated probabilities
    double sum = integratedProbs.reduce((a, b) => a + b);
    integratedProbabilities[position] =
        integratedProbs.map((p) => p / sum).toList();
  });

  return integratedProbabilities;
}

// 확률을 기반으로 무작위 시뮬레이션을 수행합니다. (유일한 숫자로)
List<int> simulateRandomTrialUnique(Map<int, List<double>> probabilities) {
  Random rand = Random();
  List<int> draw = [];
  Set<int> drawnNumbers = Set();

  probabilities.forEach((position, probs) {
    // Update probabilities to exclude already drawn numbers
    List<double> updatedProbs = List<double>.from(probs);
    drawnNumbers.forEach((number) {
      updatedProbs[number - 1] =
          0.0; // Set probability to 0 for already drawn numbers
    });

    // Normalize updated probabilities
    double sum = updatedProbs.reduce((a, b) => a + b);
    List<double> normalizedProbs = updatedProbs.map((p) => p / sum).toList();

    // Draw a number based on updated probabilities
    double randomValue = rand.nextDouble();
    double cumulativeProbability = 0.0;
    for (int i = 0; i < normalizedProbs.length; i++) {
      cumulativeProbability += normalizedProbs[i];
      if (randomValue <= cumulativeProbability) {
        draw.add(i + 1); // Adjusting for 1-based numbering
        drawnNumbers.add(i + 1);
        break;
      }
    }
  });

  return draw;
}

// 1부터 45까지의 숫자 중 6개를 선택하여 로또 번호를 생성합니다.
// 이 함수는 실제로는 로또 번호를 뽑았던 기록을 사용해야 하기 때문에,
// 실제 앱에서는 이 함수를 사용하지 않습니다.
List<int> selectUniqueNumbersOrdered(int totalNumbers, int drawCount) {
  final List<int> uniqueNumbers = [];
  final Random random = Random();

  while (uniqueNumbers.length < drawCount) {
    final int number = random.nextInt(totalNumbers) +
        1; // +1 to adjust the range from 0–44 to 1–45
    if (!uniqueNumbers.contains(number)) {
      // Check if the number is already in the list
      uniqueNumbers.add(number); // Add number if it's not already present
    }
  }

  return uniqueNumbers;
}



// 결과:

// dart run lib\test.dart

// 실제 로또 번호를 뽑았던 기록을 사용해서 각 6번 횟수에 45개 숫자의 빈도를 합산합니다.
// Frequencies: {0: [5, 3, 2, 2, 2, 5, 3, 1, 2, 4, 1, 4, 2, 4, 3, 1, 4, 2, 1, 4, 4, 3, 2, 3, 6, 2, 5, 9, 2, 4, 5, 2, 3, 3, 2, 4, 2, 3, 6, 3, 1, 4, 7, 4, 3], 1: [4, 3, 6, 3, 3, 2, 4, 5, 4, 2, 3, 3, 1, 2, 6, 2, 4, 3, 
// 1, 3, 2, 2, 1, 2, 4, 5, 4, 4, 2, 5, 4, 5, 3, 1, 5, 4, 2, 4, 2, 3, 5, 3, 3, 3, 5], 2: [2, 3, 5, 5, 4, 2, 2, 4, 2, 6, 4, 4, 3, 2, 4, 2, 3, 4, 3, 3, 2, 4, 4, 2, 2, 2, 3, 7, 7, 2, 1, 4, 2, 6, 3, 1, 3, 5, 5, 1, 6, 2, 
// 2, 2, 2], 3: [3, 5, 4, 6, 4, 5, 3, 2, 5, 4, 1, 3, 6, 4, 1, 1, 2, 2, 1, 3, 1, 4, 1, 5, 3, 1, 3, 3, 5, 4, 3, 3, 3, 2, 2, 4, 3, 3, 4, 3, 4, 5, 7, 4, 2], 4: [3, 3, 2, 4, 4, 4, 4, 3, 2, 3, 3, 3, 3, 4, 1, 2, 5, 4, 10, 
// 3, 2, 3, 5, 3, 3, 5, 2, 4, 2, 1, 5, 6, 4, 5, 4, 4, 3, 1, 1, 3, 1, 3, 3, 2, 2], 5: [3, 4, 1, 2, 4, 4, 4, 3, 4, 4, 5, 3, 7, 1, 3, 4, 1, 2, 2, 3, 3, 3, 5, 1, 5, 5, 3, 4, 2, 5, 1, 3, 3, 3, 1, 5, 4, 1, 3, 4, 4, 3, 6, 
// 4, 2]}

// 히스토리 기반 확률을 계산합니다.
// Historical probabilities: {0: [0.034013605442176874, 0.02040816326530612, 0.013605442176870748, 0.013605442176870748, 0.013605442176870748, 0.034013605442176874, 0.02040816326530612, 0.006802721088435374, 0.013605442176870748, 0.027210884353741496, 0.006802721088435374, 0.027210884353741496, 0.013605442176870748, 0.027210884353741496, 0.02040816326530612, 0.006802721088435374, 0.027210884353741496, 0.013605442176870748, 
// 0.006802721088435374, 0.027210884353741496, 0.027210884353741496, 0.02040816326530612, 0.013605442176870748, 0.02040816326530612, 0.04081632653061224, 0.013605442176870748, 0.034013605442176874, 0.061224489795918366, 0.013605442176870748, 0.027210884353741496, 0.034013605442176874, 0.013605442176870748, 0.02040816326530612, 0.02040816326530612, 0.013605442176870748, 0.027210884353741496, 0.013605442176870748, 0.02040816326530612, 0.04081632653061224, 0.02040816326530612, 0.006802721088435374, 0.027210884353741496, 0.047619047619047616, 0.027210884353741496, 0.02040816326530612], 1: [0.027210884353741496, 0.02040816326530612, 0.04081632653061224, 0.02040816326530612, 0.02040816326530612, 0.013605442176870748, 0.027210884353741496, 0.034013605442176874, 0.027210884353741496, 0.013605442176870748, 0.02040816326530612, 0.02040816326530612, 
// 0.006802721088435374, 0.013605442176870748, 0.04081632653061224, 0.013605442176870748, 0.027210884353741496, 0.02040816326530612, 0.006802721088435374, 0.02040816326530612, 0.013605442176870748, 0.013605442176870748, 0.006802721088435374, 0.013605442176870748, 0.027210884353741496, 0.034013605442176874, 0.027210884353741496, 0.027210884353741496, 0.013605442176870748, 0.034013605442176874, 0.027210884353741496, 0.034013605442176874, 0.02040816326530612, 0.006802721088435374, 0.034013605442176874, 0.027210884353741496, 0.013605442176870748, 0.027210884353741496, 0.013605442176870748, 0.02040816326530612, 0.034013605442176874, 0.02040816326530612, 0.02040816326530612, 0.02040816326530612, 0.034013605442176874], 2: [0.013605442176870748, 0.02040816326530612, 0.034013605442176874, 0.034013605442176874, 0.027210884353741496, 0.013605442176870748, 0.013605442176870748, 0.027210884353741496, 0.013605442176870748, 0.04081632653061224, 0.027210884353741496, 0.027210884353741496, 0.02040816326530612, 0.013605442176870748, 0.027210884353741496, 0.013605442176870748, 0.02040816326530612, 0.027210884353741496, 0.02040816326530612, 0.02040816326530612, 0.013605442176870748, 0.027210884353741496, 0.027210884353741496, 0.013605442176870748, 0.013605442176870748, 0.013605442176870748, 0.02040816326530612, 0.047619047619047616, 0.047619047619047616, 0.013605442176870748, 0.006802721088435374, 0.027210884353741496, 0.013605442176870748, 0.04081632653061224, 0.02040816326530612, 
// 0.006802721088435374, 0.02040816326530612, 0.034013605442176874, 0.034013605442176874, 0.006802721088435374, 0.04081632653061224, 0.013605442176870748, 0.013605442176870748, 0.013605442176870748, 0.013605442176870748], 3: [0.02040816326530612, 0.034013605442176874, 0.027210884353741496, 0.04081632653061224, 0.027210884353741496, 0.034013605442176874, 0.02040816326530612, 0.013605442176870748, 0.034013605442176874, 0.027210884353741496, 0.006802721088435374, 0.02040816326530612, 0.04081632653061224, 0.027210884353741496, 0.006802721088435374, 0.006802721088435374, 0.013605442176870748, 0.013605442176870748, 0.006802721088435374, 
// 0.02040816326530612, 0.006802721088435374, 0.027210884353741496, 0.006802721088435374, 0.034013605442176874, 0.02040816326530612, 0.006802721088435374, 0.02040816326530612, 0.02040816326530612, 0.034013605442176874, 0.027210884353741496, 0.02040816326530612, 0.02040816326530612, 0.02040816326530612, 0.013605442176870748, 0.013605442176870748, 0.027210884353741496, 0.02040816326530612, 0.02040816326530612, 0.027210884353741496, 0.02040816326530612, 0.027210884353741496, 0.034013605442176874, 0.047619047619047616, 0.027210884353741496, 0.013605442176870748], 4: [0.02040816326530612, 0.02040816326530612, 0.013605442176870748, 0.027210884353741496, 0.027210884353741496, 0.027210884353741496, 0.027210884353741496, 0.02040816326530612, 0.013605442176870748, 0.02040816326530612, 0.02040816326530612, 0.02040816326530612, 0.02040816326530612, 0.027210884353741496, 0.006802721088435374, 0.013605442176870748, 0.034013605442176874, 0.027210884353741496, 0.06802721088435375, 0.02040816326530612, 0.013605442176870748, 0.02040816326530612, 0.034013605442176874, 0.02040816326530612, 0.02040816326530612, 0.034013605442176874, 0.013605442176870748, 0.027210884353741496, 0.013605442176870748, 0.006802721088435374, 0.034013605442176874, 0.04081632653061224, 0.027210884353741496, 0.034013605442176874, 0.027210884353741496, 0.027210884353741496, 0.02040816326530612, 0.006802721088435374, 0.006802721088435374, 0.02040816326530612, 0.006802721088435374, 0.02040816326530612, 0.02040816326530612, 0.013605442176870748, 0.013605442176870748], 5: [0.02040816326530612, 0.027210884353741496, 0.006802721088435374, 0.013605442176870748, 0.027210884353741496, 0.027210884353741496, 0.027210884353741496, 0.02040816326530612, 0.027210884353741496, 0.027210884353741496, 0.034013605442176874, 0.02040816326530612, 0.047619047619047616, 0.006802721088435374, 0.02040816326530612, 0.027210884353741496, 0.006802721088435374, 0.013605442176870748, 0.013605442176870748, 0.02040816326530612, 0.02040816326530612, 0.02040816326530612, 0.034013605442176874, 0.006802721088435374, 0.034013605442176874, 0.034013605442176874, 0.02040816326530612, 0.027210884353741496, 0.013605442176870748, 0.034013605442176874, 0.006802721088435374, 0.02040816326530612, 0.02040816326530612, 0.02040816326530612, 0.006802721088435374, 0.034013605442176874, 0.027210884353741496, 0.006802721088435374, 0.02040816326530612, 0.027210884353741496, 0.027210884353741496, 0.02040816326530612, 0.04081632653061224, 0.027210884353741496, 0.013605442176870748]}

// 기기 노이즈 기반 확률을 생성합니다.
// Noise probabilities: [0.25450738955523233, 0.229242069434059, 0.26024094685259663, 0.12950428458542096, 0.12650530957269113]

// 히스토리 기반 확률과 노이즈 기반 확률을 통합합니다.
// Integrated probabilities: {0: [0.14426049749870454, 0.1248251163496825, 0.13692319451473364, 0.07155486338114582, 0.0700553758747809, 0.01700680272108843, 0.010204081632653055, 0.0034013605442176856, 0.006802721088435371, 0.013605442176870743, 0.0034013605442176856, 0.013605442176870743, 0.006802721088435371, 0.013605442176870743, 0.010204081632653055, 0.0034013605442176856, 0.013605442176870743, 0.006802721088435371, 0.0034013605442176856, 0.013605442176870743, 0.013605442176870743, 0.010204081632653055, 0.006802721088435371, 0.010204081632653055, 0.02040816326530611, 0.006802721088435371, 0.01700680272108843, 0.03061224489795917, 0.006802721088435371, 0.013605442176870743, 0.01700680272108843, 0.006802721088435371, 0.010204081632653055, 0.010204081632653055, 0.006802721088435371, 0.013605442176870743, 0.006802721088435371, 0.010204081632653055, 0.02040816326530611, 0.010204081632653055, 0.0034013605442176856, 0.013605442176870743, 0.023809523809523798, 0.013605442176870743, 0.010204081632653055], 1: [0.14085913695448685, 0.1248251163496825, 0.15052863669160438, 0.07495622392536351, 0.0734567364189986, 0.006802721088435371, 0.013605442176870743, 0.01700680272108843, 0.013605442176870743, 0.006802721088435371, 0.010204081632653055, 0.010204081632653055, 0.0034013605442176856, 0.006802721088435371, 0.02040816326530611, 0.006802721088435371, 0.013605442176870743, 0.010204081632653055, 0.0034013605442176856, 0.010204081632653055, 0.006802721088435371, 0.006802721088435371, 0.0034013605442176856, 0.006802721088435371, 0.013605442176870743, 0.01700680272108843, 0.013605442176870743, 0.013605442176870743, 0.006802721088435371, 0.01700680272108843, 0.013605442176870743, 0.01700680272108843, 0.010204081632653055, 0.0034013605442176856, 0.01700680272108843, 0.013605442176870743, 0.006802721088435371, 0.013605442176870743, 0.006802721088435371, 0.010204081632653055, 0.01700680272108843, 0.010204081632653055, 0.010204081632653055, 0.010204081632653055, 0.01700680272108843], 2: [0.1340564158660515, 0.1248251163496825, 0.1471272761473867, 0.08175894501379888, 0.07685809696321629, 0.006802721088435371, 0.006802721088435371, 0.013605442176870743, 0.006802721088435371, 0.02040816326530611, 0.013605442176870743, 0.013605442176870743, 0.010204081632653055, 0.006802721088435371, 0.013605442176870743, 0.006802721088435371, 0.010204081632653055, 0.013605442176870743, 0.010204081632653055, 0.010204081632653055, 0.006802721088435371, 0.013605442176870743, 0.013605442176870743, 0.006802721088435371, 0.006802721088435371, 0.006802721088435371, 0.010204081632653055, 0.023809523809523798, 0.023809523809523798, 0.006802721088435371, 0.0034013605442176856, 0.013605442176870743, 0.006802721088435371, 0.02040816326530611, 0.010204081632653055, 0.0034013605442176856, 0.010204081632653055, 0.01700680272108843, 0.01700680272108843, 0.0034013605442176856, 0.02040816326530611, 0.006802721088435371, 0.006802721088435371, 0.006802721088435371, 0.006802721088435371], 3: [0.13745777641026918, 0.13162783743811787, 0.143725915603169, 0.08516030555801656, 0.07685809696321629, 0.01700680272108843, 0.010204081632653055, 0.006802721088435371, 0.01700680272108843, 0.013605442176870743, 0.0034013605442176856, 0.010204081632653055, 0.02040816326530611, 0.013605442176870743, 
// 0.0034013605442176856, 0.0034013605442176856, 0.006802721088435371, 0.006802721088435371, 0.0034013605442176856, 0.010204081632653055, 0.0034013605442176856, 0.013605442176870743, 0.0034013605442176856, 0.01700680272108843, 0.010204081632653055, 0.0034013605442176856, 0.010204081632653055, 0.010204081632653055, 0.01700680272108843, 0.013605442176870743, 0.010204081632653055, 0.010204081632653055, 0.010204081632653055, 0.006802721088435371, 0.006802721088435371, 0.013605442176870743, 0.010204081632653055, 0.010204081632653055, 0.013605442176870743, 0.010204081632653055, 0.013605442176870743, 0.01700680272108843, 0.023809523809523798, 0.013605442176870743, 0.006802721088435371], 4: [0.13745777641026918, 0.1248251163496825, 0.13692319451473364, 0.07835758446958119, 0.07685809696321629, 0.013605442176870743, 0.013605442176870743, 0.010204081632653055, 0.006802721088435371, 0.010204081632653055, 0.010204081632653055, 0.010204081632653055, 0.010204081632653055, 0.013605442176870743, 0.0034013605442176856, 0.006802721088435371, 0.01700680272108843, 0.013605442176870743, 0.03401360544217686, 0.010204081632653055, 0.006802721088435371, 0.010204081632653055, 0.01700680272108843, 0.010204081632653055, 0.010204081632653055, 0.01700680272108843, 0.006802721088435371, 0.013605442176870743, 0.006802721088435371, 0.0034013605442176856, 0.01700680272108843, 0.02040816326530611, 0.013605442176870743, 0.01700680272108843, 0.013605442176870743, 0.013605442176870743, 0.010204081632653055, 0.0034013605442176856, 0.0034013605442176856, 0.010204081632653055, 0.0034013605442176856, 0.010204081632653055, 0.010204081632653055, 0.006802721088435371, 0.006802721088435371], 5: [0.13745777641026918, 0.12822647689390018, 0.13352183397051595, 0.07155486338114582, 0.07685809696321629, 0.013605442176870743, 0.013605442176870743, 0.010204081632653055, 0.013605442176870743, 0.013605442176870743, 0.01700680272108843, 0.010204081632653055, 0.023809523809523798, 0.0034013605442176856, 0.010204081632653055, 0.013605442176870743, 0.0034013605442176856, 0.006802721088435371, 0.006802721088435371, 0.010204081632653055, 0.010204081632653055, 0.010204081632653055, 0.01700680272108843, 0.0034013605442176856, 0.01700680272108843, 0.01700680272108843, 0.010204081632653055, 0.013605442176870743, 0.006802721088435371, 0.01700680272108843, 0.0034013605442176856, 0.010204081632653055, 0.010204081632653055, 0.010204081632653055, 0.0034013605442176856, 0.01700680272108843, 0.013605442176870743, 0.0034013605442176856, 0.010204081632653055, 0.013605442176870743, 0.013605442176870743, 0.010204081632653055, 0.02040816326530611, 0.013605442176870743, 0.006802721088435371]}

// 만들어낸 확률 맵을 기반으로 무작위 시뮬레이션을 수행합니다.
// Randomly simulated draw with unique numbers: [3, 11, 4, 38, 1, 44]
